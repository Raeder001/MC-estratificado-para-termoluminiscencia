import numpy as np
import sympy as sp
from tabulate import tabulate
import matplotlib.pyplot as plt
import pandas as pd


# Lista de temperaturas
temperaturas_kelvin = np.array([325.15, 326.15, 328.15, 330.15, 332.15, 334.15, 336.15, 337.15, 339.15, 341.15,
               343.15, 345.15, 347.15, 349.15, 351.15, 353.15, 355.15, 356.15, 358.15, 360.15,
               362.15, 364.15, 366.15, 368.15, 370.15, 372.15, 374.15, 376.15, 378.15, 380.15,
               381.15, 383.15, 385.15, 387.15, 389.15, 391.15, 393.15, 395.15, 397.15, 399.15,
               401.15, 403.15, 405.15, 407.15, 409.15, 410.15, 412.15, 414.15, 416.15, 418.15,
               419.15, 422.15, 423.15, 425.15, 428.15, 429.15, 431.15, 433.15, 435.15, 437.15,
               439.15, 441.15, 442.15, 445.15, 446.15, 449.15, 450.15, 452.15, 454.15, 456.15,
               458.15, 460.15, 462.15, 464.15, 466.15, 468.15, 470.15, 471.15, 474.15, 475.15,
               477.15, 479.15, 481.15, 483.15, 485.15, 487.15, 489.15, 491.15, 493.15, 495.15,
               497.15, 499.15, 501.15, 502.15, 504.15, 506.15, 508.15, 510.15, 512.15, 514.15,
               515.15, 517.15, 519.15, 521.15, 523.15, 525.15, 527.15, 529.15, 531.15, 533.15,
               535.15, 537.15, 539.15, 540.15, 543.15, 544.15, 546.15, 548.15, 550.15, 552.15,
               554.15, 556.15, 558.15, 560.15, 562.15, 563.15, 565.15, 567.15, 569.15, 571.15,
               573.15, 575.15, 577.15, 579.15, 581.15, 583.15, 585.15, 586.15, 588.15, 590.15,
               592.15, 594.15, 596.15, 598.15, 600.15, 602.15, 604.15, 606.15, 607.15, 609.15,
               611.15, 613.15, 615.15, 617.15, 619.15, 621.15, 623.15, 625.15, 627.15, 628.15,
               630.15, 632.15, 634.15, 636.15, 638.15, 640.15, 642.15, 644.15, 646.15, 648.15,
               649.15, 651.15, 653.15, 655.15, 657.15, 659.15, 661.15, 663.15, 665.15, 667.15,
               669.15, 670.15, 672.15])



# Lista de intensidades de TL
intensidades = np.array([139, 154, 197, 238, 136, 135, 252, 231, 217, 377, 528, 362, 447, 619, 535, 548,
              766, 831, 953, 963, 1159, 1533, 1814, 2134, 2443, 2547, 3076, 3683, 3721, 4496,
              5111, 5917, 6490, 7112, 8133, 8805, 10515, 10697, 11648, 12960, 14205, 15081,
              16561, 18610, 21543, 24363, 26022, 29042, 33668, 37654, 42083, 48063, 53994,
              60113, 65625, 72405, 80825, 86091, 91431, 100505, 106245, 110940, 116491, 119494,
              123741, 120026, 122565, 120028, 116314, 108888, 104407, 96170, 87742, 78936,
              72285, 61418, 56431, 47622, 41652, 35764, 31051, 26433, 23081, 20467, 18270,
              16286, 16352, 15799, 14964, 14726, 15321, 14860, 16130, 17154, 16369, 17303,
              16763, 17994, 18353, 20763, 20587, 22631, 23584, 26372, 28109, 30326, 33577,
              34900, 37626, 39548, 41638, 46430, 46160, 49938, 52112, 55097, 57206, 58326,
              61385, 61309, 61734, 62963, 60254, 60869, 60305, 59433, 56164, 54024, 52733,
              49544, 47672, 45909, 43697, 38772, 36228, 35328, 33176, 30326, 28288, 25902,
              23987, 22327, 21709, 21649, 19825, 20329, 20670, 21537, 20876, 22702, 23296,
              23713, 24404, 24422, 26156, 27100, 28763, 28410, 29014, 29421, 28072, 29067,
              29631, 28283, 27975, 27474, 27505, 26375, 25620, 24620, 22114, 22623, 21004,
              21185, 21637, 19361, 18227, 17851, 18691, 17465, 18265, 17979, 15967])

#funcion de ajuste 
def Intensity(E_a,b,T):

    return  (Im*b**(b/(b-1)))*np.exp((E_a*(T-Tm))/(k*T*Tm))*(1+(b-1)*((2*k*Tm)/E_a)+(b-1)*(1-(2*k*T)/E_a)*((T**2/Tm**2)*np.exp((E_a*(T-Tm))/(k*T*Tm))))**(-b/(b-1))

#Im es la intensidad maxima, Tm en la temperatura a la que se alcanza Im, ambos dato son experimentales 


#Calculo del area
def area_trapecios(x, y):
    #x = sp.Symbol('x') 
    area = 0
    for i in range(len(x) - 1):
        area += (y[i] + y[i + 1]) * (x[i + 1] - x[i]) / 2
    return area

seleccion1_t = temperaturas_kelvin[45:83]
seleccion1_I = intensidades[45:83]

# Crear la figura
fig, ax= plt.subplots()

# Graficar los puntos experimentales 
ax.scatter(temperaturas_kelvin, intensidades, s=7)

# Agregar etiquetas a los ejes
ax.set_xlabel('Temperatura (K)')
ax.set_ylabel('Intensidad de TL (a.u.)')
plt.title('Intensidad de TL vs Temperatura')

# Mostrar la gráfica
plt.show()

fig, ax= plt.subplots()
ax.scatter(temperaturas_kelvin, intensidades, s=7)
ax.scatter(seleccion1_t, seleccion1_I, s=7,label='Porcion seleccionada')

# Agregar etiquetas a los ejes
ax.set_xlabel('Temperatura (K)')
ax.set_ylabel('Intensidad de TL (a.u.)')

# Agregar un título a la gráfica
plt.title('Intensidad de TL vs Temperatura')
plt.legend()
# Mostrar la gráfica
plt.show()

# Crear la figura
fig, ax = plt.subplots()

# Graficar los puntos

ax.plot(seleccion1_t, seleccion1_I, 'gray', lw=0.8)
ax.scatter(seleccion1_t, seleccion1_I, color='orange',label='Datos experimentales',s=10,zorder=2)


for temp, intens in zip(seleccion1_t, seleccion1_I):
    plt.plot([temp, temp], [0, intens], color='gray', linewidth=0.8)
    
plt.ylim(0, 130000)
# Agregar etiquetas a los ejes
ax.set_xlabel('Temperatura (K)')
ax.set_ylabel('Intensidad de TL (a.u.)')

# Agregar un título a la gráfica
plt.title('Intensidad de TL vs Temperatura')

# Mostrar la gráfica
plt.show()

#valores de areas
areat = area_trapecios(temperaturas_kelvin, intensidades)
area1 = area_trapecios(seleccion1_t, seleccion1_I)

print(f"Área bajo la curva 1: {areat}")
print(f"Área bajo la curva de la Porción selecionada: {area1}")

# Mostrar las regiones seleccionas para MC estratificado
plt.show()

fig, ax= plt.subplots()

ax.plot(seleccion1_t, seleccion1_I,lw=1,color='orange')
plt.ylim(0, 130000)

# Agregar etiquetas a los ejes
ax.set_xlabel('Temperatura (K)')
ax.set_ylabel('Intensidad de TL (a.u.)')

# Agregar un título a la gráfica
plt.title('Intensidad de TL vs Temperatura')
plt.axvline(410.15, color='black', linewidth=1, linestyle='--')
plt.axvline(435.15, color='black', linewidth=1, linestyle='--')
plt.axvline(460.15, color='black', linewidth=1, linestyle='--')
plt.axvline(481.15, color='black', linewidth=1, linestyle='--')
# Mostrar la gráfica
plt.show()

region=[410.15,435.15,460.15,481.15]
#Contantes y datos experimentales
k = 8.617e-5
Im=seleccion1_I[19]
Tm=seleccion1_t[19]

#numeros aleatorios la los valos de energia entre 0.5 y 1.5 eV
def Erandon(x):
    return 0.5+np.random.random_sample((x))


E_e=Erandon(10)


#funcion auxiliar para la estimacion de los parametros cineticos
def fun(y,p,x):
    p=Intensity(E_e[p],x,y)
    return p



i=1.1

while i < 2:
    #Rango de valores de x
    #x = temperaturas_kelvin
    x=np.linspace(410.15,481.15,100)
    # Calcular los valores de y
    y1 = fun(x,0,i)
    y2=fun(x,1,i)
    y3=fun(x,2,i)
    y4=fun(x,3,i)
    y5=fun(x,4,i)
    y6=fun(x,5,i)
    y7=fun(x,6,i)
    y8=fun(x,7,i)
    y9=fun(x,8,i)
    y10=fun(x,9,i)

    # Graficar la función
    plt.plot(x, y1,label=("E1=",round(E_e[0], 2)))
    plt.plot(x, y2,label=("E2=",round(E_e[1], 2)))
    plt.plot(x, y3,label=("E3=",round(E_e[2], 2)))
    plt.plot(x, y4,label=("E4=",round(E_e[3], 2)))
    plt.plot(x, y5,label=("E5=",round(E_e[4], 2)))
    plt.plot(x, y6,label=("E6=",round(E_e[5], 2)))
    plt.plot(x, y7,label=("E7=",round(E_e[6], 2)))
    plt.plot(x, y8, label=("E8=",round(E_e[7], 2)))
    plt.plot(x, y9,label=("E9=",round(E_e[8], 2)))
    plt.plot(x, y10,label=("E10=",round(E_e[9], 2)))

    # Agregar título y etiquetas a los ejes
    plt.title(f"Curvas para b = {round(i, 2)}")

    plt.xlabel("Temperatura (K)")
    plt.ylabel("Intensidad(u.a)")
    plt.legend(bbox_to_anchor=(1.05, 1))
    # Mostrar la gráfica
    plt.show()
        

    N=100000

    R1=410.15+np.random.random_sample((N))*(25)
    R2=435.15+np.random.random_sample((N))*(25)
    R3=460.15+np.random.random_sample((N))*(21)

    #Calculo del primer area
    est11=(region[1]-region[0])*(np.sum(fun(R1,0,i)/len(R1)))
    est12=(region[2]-region[1])*(np.sum(fun(R2,0,i)/len(R2)))
    est13=(region[3]-region[2])*(np.sum(fun(R3,0,i)/len(R3)))

    estt1=est11+est12+est13

    s11=((region[1]-region[0]))*(np.sum(fun(R1,0,i)**2)/len(R1))-(est11**2/len(R1))
    s12=((region[2]-region[1]))*(np.sum(fun(R2,0,i)**2)/len(R2))-(est12**2/len(R2))
    s13=((region[3]-region[2]))*(np.sum(fun(R3,0,i)**2)/len(R3))-(est13**2/len(R3))

    st1=np.sqrt(s11+s12+s13)
    
    print(f"Para b = {round(i, 2)}")
    print("Para el valor de energia E1 =",round(E_e[0], 2), "el resultado de Est/area es", estt1/area1)
    print(st1/area1)

    #Calculo del segundo area
    est21=(region[1]-region[0])*(np.sum(fun(R1,1,i)/len(R1)))
    est22=(region[2]-region[1])*(np.sum(fun(R2,1,i)/len(R2)))
    est23=(region[3]-region[2])*(np.sum(fun(R3,1,i)/len(R3)))

    estt2=est21+est22+est23

    s21=((region[1]-region[0]))*(np.sum(fun(R1,1,i)**2)/len(R1))-(est21**2/len(R1))
    s22=((region[2]-region[1]))*(np.sum(fun(R2,1,i)**2)/len(R2))-(est22**2/len(R2))
    s23=((region[3]-region[2]))*(np.sum(fun(R3,1,i)**2)/len(R3))-(est23**2/len(R3))

    st2=np.sqrt(s21+s22+s23)

    print("Para el valor de energia E2 =",round(E_e[1], 2), "el resultado de Est/area es", estt2/area1)
    print(st2/area1)

    #Calculo del tercer area
    est31=(region[1]-region[0])*(np.sum(fun(R1,2,i)/len(R1)))
    est32=(region[2]-region[1])*(np.sum(fun(R2,2,i)/len(R2)))
    est33=(region[3]-region[2])*(np.sum(fun(R3,2,i)/len(R3)))

    estt3=est31+est32+est33

    s31=((region[1]-region[0]))*(np.sum(fun(R1,2,i)**2)/len(R1))-(est31**2/len(R1))
    s32=((region[2]-region[1]))*(np.sum(fun(R2,2,i)**2)/len(R2))-(est32**2/len(R2))
    s33=((region[3]-region[2]))*(np.sum(fun(R3,2,i)**2)/len(R3))-(est33**2/len(R3))

    st3=np.sqrt(s31+s32+s33)

    print("Para el valor de energia E3 =",round(E_e[2], 2), "el resultado de Est/area es", estt3/area1)
    print(st3/area1)

    #Calculo del cuarto area 
    est41=(region[1]-region[0])*(np.sum(fun(R1,3,i)/len(R1)))
    est42=(region[2]-region[1])*(np.sum(fun(R2,3,i)/len(R2)))
    est43=(region[3]-region[2])*(np.sum(fun(R3,3,i)/len(R3)))

    estt4=est41+est42+est43

    s41=((region[1]-region[0]))*(np.sum(fun(R1,3,i)**2)/len(R1))-(est41**2/len(R1))
    s42=((region[2]-region[1]))*(np.sum(fun(R2,3,i)**2)/len(R2))-(est42**2/len(R2))
    s43=((region[3]-region[2]))*(np.sum(fun(R3,3,i)**2)/len(R3))-(est43**2/len(R3))

    st4=np.sqrt(s41+s42+s43)

    print("Para el valor de energia E4 =",round(E_e[3], 2), "el resultado de Est/area es", estt4/area1)
    print(st4/area1)

    #Calculo del quinto area
    est51=(region[1]-region[0])*(np.sum(fun(R1,4,i)/len(R1)))
    est52=(region[2]-region[1])*(np.sum(fun(R2,4,i)/len(R2)))
    est53=(region[3]-region[2])*(np.sum(fun(R3,4,i)/len(R3)))

    estt5=est51+est52+est53

    s51=((region[1]-region[0]))*(np.sum(fun(R1,4,i)**2)/len(R1))-(est51**2/len(R1))
    s52=((region[2]-region[1]))*(np.sum(fun(R2,4,i)**2)/len(R2))-(est52**2/len(R2))
    s53=((region[3]-region[2]))*(np.sum(fun(R3,4,i)**2)/len(R3))-(est53**2/len(R3))

    st5=np.sqrt(s51+s52+s53)
    
    print("Para el valor de energia E5 =",round(E_e[4], 2), "el resultado de Est/area es", estt5/area1)
    print(st5/area1)

    #Calculo de sexto area 
    est61=(region[1]-region[0])*(np.sum(fun(R1,5,i)/len(R1)))
    est62=(region[2]-region[1])*(np.sum(fun(R2,5,i)/len(R2)))
    est63=(region[3]-region[2])*(np.sum(fun(R3,5,i)/len(R3)))

    estt6=est61+est62+est63

    s61=((region[1]-region[0]))*(np.sum(fun(R1,5,i)**2)/len(R1))-(est61**2/len(R1))
    s62=((region[2]-region[1]))*(np.sum(fun(R2,5,i)**2)/len(R2))-(est62**2/len(R2))
    s63=((region[3]-region[2]))*(np.sum(fun(R3,5,i)**2)/len(R3))-(est63**2/len(R3))

    st6=np.sqrt(s61+s62+s63)

    print("Para el valor de energia E6 =",round(E_e[5], 2), "el resultado de Est/area es", estt6/area1)
    print(st6/area1)

    #Calculo del septimo area 
    est71=(region[1]-region[0])*(np.sum(fun(R1,6,i)/len(R1)))
    est72=(region[2]-region[1])*(np.sum(fun(R2,6,i)/len(R2)))
    est73=(region[3]-region[2])*(np.sum(fun(R3,6,i)/len(R3)))

    estt7=est71+est72+est73

    s71=((region[1]-region[0]))*(np.sum(fun(R1,6,i)**2)/len(R1))-(est71**2/len(R1))
    s72=((region[2]-region[1]))*(np.sum(fun(R2,6,i)**2)/len(R2))-(est72**2/len(R2))
    s73=((region[3]-region[2]))*(np.sum(fun(R3,6,i)**2)/len(R3))-(est73**2/len(R3))

    st7=np.sqrt(s71+s72+s73)

    print("Para el valor de energia E7 =",round(E_e[6], 2), "el resultado de Est/area es", estt7/area1)
    print(st7/area1)

    #Calculo del octavo area
    est81=(region[1]-region[0])*(np.sum(fun(R1,7,i)/len(R1)))
    est82=(region[2]-region[1])*(np.sum(fun(R2,7,i)/len(R2)))
    est83=(region[3]-region[2])*(np.sum(fun(R3,7,i)/len(R3)))

    estt8=est81+est82+est83

    s81=((region[1]-region[0]))*(np.sum(fun(R1,7,i)**2)/len(R1))-(est81**2/len(R1))
    s82=((region[2]-region[1]))*(np.sum(fun(R2,7,i)**2)/len(R2))-(est82**2/len(R2))
    s83=((region[3]-region[2]))*(np.sum(fun(R3,7,i)**2)/len(R3))-(est83**2/len(R3))

    st8=np.sqrt(s81+s82+s83)

    print("Para el valor de energia E8 =",round(E_e[7], 2), "el resultado de Est/area es", estt8/area1)
    print(st8/area1)

    #Calculo del noveno area 
    est91=(region[1]-region[0])*(np.sum(fun(R1,8,i)/len(R1)))
    est92=(region[2]-region[1])*(np.sum(fun(R2,8,i)/len(R2)))
    est93=(region[3]-region[2])*(np.sum(fun(R3,8,i)/len(R3)))

    estt9=est91+est92+est93

    s91=((region[1]-region[0]))*(np.sum(fun(R1,8,i)**2)/len(R1))-(est91**2/len(R1))
    s92=((region[2]-region[1]))*(np.sum(fun(R2,8,i)**2)/len(R2))-(est92**2/len(R2))
    s93=((region[3]-region[2]))*(np.sum(fun(R3,8,i)**2)/len(R3))-(est93**2/len(R3))

    st9=np.sqrt(s91+s92+s93)

    print("Para el valor de energia E9 =",round(E_e[8], 2), "el resultado de Est/area es", estt9/area1)
    print(st9/area1)

    #Calculo del decimo area
    est101=(region[1]-region[0])*(np.sum(fun(R1,9,i)/len(R1)))
    est102=(region[2]-region[1])*(np.sum(fun(R2,9,i)/len(R2)))
    est103=(region[3]-region[2])*(np.sum(fun(R3,9,i)/len(R3)))

    estt10=est101+est102+est103

    s101=((region[1]-region[0]))*(np.sum(fun(R1,9,i)**2)/len(R1))-(est101**2/len(R1))
    s102=((region[2]-region[1]))*(np.sum(fun(R2,9,i)**2)/len(R2))-(est102**2/len(R2))
    s103=((region[3]-region[2]))*(np.sum(fun(R3,9,i)**2)/len(R3))-(est103**2/len(R3))

    st10=np.sqrt(s101+s102+s103)

    print("Para el valor de energia E10 =",round(E_e[9], 2), "el resultado de Est/area es", estt10/area1)
    print(st10/area1)

    # Listas para almacenar los datos
    x1_datos = [1,2,3,4,5,6,7,8,9,10]
    y1_datos = [estt1/area1,estt2/area1,estt3/area1,estt4/area1,estt5/area1,estt6/area1,estt7/area1,estt8/area1,estt9/area1,estt10/area1]

    # Graficar los datos
    plt.scatter(x1_datos, y1_datos)

    plt.xlabel('#')
    plt.ylabel('Est/Area')
    plt.title('Distribucion')
    plt.xticks(np.arange(0, 11, 1),['0', r'E1', r'E2', r'E3', r'E4', r'E5',r'E6',r'E7',r'E8',r'E9',r'E10'])
    plt.axhline(1, color='Red', linewidth=1)
    plt.grid(False)
    plt.show()
    
    
    # Definir los encabezados de la tabla
    
    print(f'Para un valor de b = {round(i, 2)}')
    headers = ["Energia", "valor", "varianza", "estt/area", "orden cinetico"]

    # Añadir datos a la tabla
    data = [
        ["E1", round(E_e[0], 2), st1/area1, estt1/area1],
        ["E2", round(E_e[1], 2), st2/area1, estt2/area1],
        ["E3", round(E_e[2], 2), st3/area1, estt3/area1],
        ["E4", round(E_e[3], 2), st4/area1, estt4/area1],
        ["E5", round(E_e[4], 2), st5/area1, estt5/area1],
        ["E6", round(E_e[5], 2), st6/area1, estt6/area1],
        ["E7", round(E_e[6], 2), st7/area1, estt7/area1],
        ["E8", round(E_e[7], 2), st8/area1, estt8/area1],
        ["E9", round(E_e[8], 2), st9/area1, estt9/area1],
        ["E10", round(E_e[9], 2), st10/area1, estt10/area1],
        ]
    #nos interesan los valores de energia cuya coeficiente st/area1 esten en el rango de 0.9 a 1.1
    data_filtrada = [row for row in data if 0.95 <= row[3] <= 1.05 ]
    # Crear la tabla
    table = tabulate(data_filtrada, headers, tablefmt="grid")

    # Imprimir la tabla
    print(table)
    
    i+=0.1
    
#Rango de valores de x
    #x = temperaturas_kelvin
Tm=448.15
l=np.linspace(325.15,672.15,100)
    # Calcular los valores de y
j=Intensity(1.15, 1.44, l)

    # Graficar la función
plt.plot(l,j,color='red',label='Ajuste')
plt.scatter(temperaturas_kelvin, intensidades, s=7,label='Experimentales')


    # Agregar título y etiquetas a los ejes
plt.title("Ajuste")

plt.xlabel("Temperatura (K)")
plt.ylabel("Intensidad(u.a)")
plt.legend()



    # Mostrar la gráfica
plt.show()
